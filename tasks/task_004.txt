# Task ID: 4
# Title: Implement Match Creation and Configuration
# Status: pending
# Dependencies: 2, 3
# Priority: high
# Description: Develop the functionality to create and configure new matches, including team setup, match format selection, and timeout configuration.
# Details:
1. Create API endpoints for match creation and configuration
2. Implement match configuration validation
3. Develop frontend form for match creation
4. Implement team and player assignment
5. Create match format selection with predefined options
6. Implement timeout configuration
7. Add figure color selection for teams

API Endpoints:
```
POST /api/matches - Create a new match
GET /api/matches/:id - Get match details
PUT /api/matches/:id - Update match configuration
DELETE /api/matches/:id - Delete a match
```

Match Creation Form Fields:
- Match format (Single set, Best of 3, Best of 9)
- Player setup (1v1 or 2v2)
- Team names
- Player names (1 or 2 per team)
- Team colors
- Timeouts per set (1 or 2, default: 2)
- Last-set 2-goal rule toggle

Validation Rules:
- Team names must be unique
- Player names must be provided
- Valid match format must be selected
- Timeout count must be 1 or 2

# Test Strategy:
1. Test match creation with valid and invalid data
2. Verify that validation rules are enforced
3. Test all match format configurations
4. Verify that team and player assignments are saved correctly
5. Test timeout configuration options
6. Verify that match state is correctly initialized
7. Test match deletion and confirm data is removed
8. Verify that only authenticated users can create matches
9. Test the UI form for usability and error handling

# Subtasks:
## 1. Create Match API Endpoints [pending]
### Dependencies: None
### Description: Implement the backend API endpoints for match creation, retrieval, updating, and deletion.
### Details:
Create RESTful API endpoints for match operations: POST /api/matches for creation, GET /api/matches/:id for retrieval, PUT /api/matches/:id for updates, and DELETE /api/matches/:id for deletion. Implement proper request handling, response formatting, and error handling. Define the Match model with all required fields including match format, player setup, team names, player names, team colors, timeout settings, and last-set rule toggle.

## 2. Implement Match Configuration Validation [pending]
### Dependencies: None
### Description: Create validation logic for match configuration to ensure all required fields are present and valid.
### Details:
Implement server-side validation for match configuration that enforces: unique team names, required player names, valid match format selection (Single set, Best of 3, Best of 9), and timeout count validation (must be 1 or 2). Create reusable validation functions that can be used by both API endpoints and potentially frontend validation. Return appropriate error messages for validation failures.

## 3. Develop Match Creation Form UI [pending]
### Dependencies: None
### Description: Create the frontend form interface for match creation and configuration with all required input fields.
### Details:
Build a multi-step or single-page form with fields for: match format selection (radio buttons or dropdown), player setup selection (1v1 or 2v2), team name inputs, player name inputs (dynamically showing 1 or 2 per team based on setup), team color pickers, timeout count selector, and last-set 2-goal rule toggle. Include appropriate labels, placeholders, and help text. Implement responsive design for mobile and desktop views.

## 4. Implement Form Validation and Submission [pending]
### Dependencies: None
### Description: Add client-side validation to the match creation form and connect it to the backend API.
### Details:
Implement client-side validation that mirrors server-side rules: unique team names, required player names, valid match format, and valid timeout count. Show inline validation errors. Create form submission handler that collects form data, validates it, and sends it to the backend API. Handle API responses including success and error cases. Implement loading states during submission and redirect to the match view on successful creation.

## 5. Create Match Configuration Preview [pending]
### Dependencies: None
### Description: Implement a preview component that shows the match configuration before final submission.
### Details:
Create a visual preview component that displays the complete match configuration including: teams with their colors, players, match format, timeout settings, and other rules. This should update in real-time as the user changes form values. Add a confirmation step before final submission where users can review their configuration. Include the ability to go back and edit before confirming.

